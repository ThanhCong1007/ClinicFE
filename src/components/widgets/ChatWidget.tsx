import React, { useEffect, useRef, useState } from "react";
import "./ChatWidget.css";

const ChatWidget: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<{ sender: "user" | "ai"; text: string }[]>([]);
  const [inputValue, setInputValue] = useState("");
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // G√°n conversationId n·∫øu ch∆∞a c√≥
    if (!sessionStorage.getItem("conversationId")) {
      sessionStorage.setItem("conversationId", "conv_" + Date.now());
    }
  }, []);

  useEffect(() => {
    // Cu·ªôn ƒë·∫øn tin nh·∫Øn cu·ªëi c√πng
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleIconClick = () => {
    setIsOpen(!isOpen);

    const hasGreeted = sessionStorage.getItem("hasGreeted");
    if (!hasGreeted) {
      displayMessage(
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω nha khoa c·ªßa ph√≤ng kh√°m N2CDentCare. T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ c√°c d·ªãch v·ª• nha khoa v√† gi√∫p b·∫°n ƒë·∫∑t l·ªãch h·∫πn. B·∫°n c·∫ßn h·ªó tr·ª£ v·∫•n ƒë·ªÅ g√¨?",
        "ai"
      );
      sessionStorage.setItem("hasGreeted", "true");
    }
  };

  const displayMessage = (text: string, sender: "user" | "ai") => {
    if (text.startsWith("\\") || text.includes("frac")) {
      text = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉn th·ªã c√¥ng th·ª©c to√°n h·ªçc.";
    }
    setMessages((prev) => [...prev, { sender, text }]);
  };

  const sendMessage = async () => {
    const message = inputValue.trim();
    if (!message) return;

    displayMessage(message, "user");
    setInputValue("");

    try {
      const conversationId = sessionStorage.getItem("conversationId") || "new";

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          message,
          conversationId,
        }),
      });

      const data = await response.json();
      const aiResponse = data.response || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.";

      displayMessage(aiResponse, "ai");
    } catch (error) {
      displayMessage("L·ªói khi g·ª≠i tin nh·∫Øn!", "ai");
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") sendMessage();
  };

  return (
    <>
      <div id="chat-icon" onClick={handleIconClick} style={{ cursor: "pointer" }}>
        ü§ñ
      </div>

      {isOpen && (
        <div id="chat-container" style={{ display: "flex", flexDirection: "column", width: "300px", border: "1px solid #ccc", borderRadius: "8px", padding: "10px" }}>
          <div id="chat-header">T∆∞ v·∫•n Nha khoa</div>
          <div id="chat-messages" style={{ flex: 1, overflowY: "auto", maxHeight: "300px", marginTop: "10px" }}>
            {messages.map((msg, index) => (
              <div key={index} className={`message ${msg.sender}`} style={{ margin: "4px 0" }}>
                {msg.text}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
          <div id="chat-input-container" style={{ display: "flex", marginTop: "10px" }}>
            <input
              id="chat-input"
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              style={{ flex: 1, marginRight: "5px" }}
            />
            <button id="send-btn" onClick={sendMessage}>
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default ChatWidget;
